
import com.formdev.flatlaf.intellijthemes.FlatArcIJTheme;
import com.formdev.flatlaf.intellijthemes.*;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.*;

public class Books extends javax.swing.JFrame {

    /**
     * Creates new form Books
     */
    
    Connection con;
    Statement stmtGet;
    ResultSet rsGet;
    
    int rowCount, stockCount;
    int bookPrice, totalBookPrice;
    int gradeLevelIndex;

    String getBookList, noStockBookTitle;
    DefaultTableModel tblBookElem, tblBookJhs, tblBookShs, tblBookCollege;
    ArrayList<String> noStockBook;
    

    public Books() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);

    }
    
    String SRCODE, NAME, LASTNAME, MIDDLENAME;

    Books(String lName, String name, String mName,String SR) {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        
        this.SRCODE = SR;        
        this.NAME = name;
        this.LASTNAME = lName;
        this.MIDDLENAME = mName;
                
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
        LocalDateTime now = LocalDateTime.now();
        
        subheadTime.setText(String.valueOf(dtf.format(now)));

        tblBookJhs = (DefaultTableModel) bookListJhs.getModel();
        tblBookShs = (DefaultTableModel) bookListShs.getModel();
        tblBookCollege = (DefaultTableModel) bookListCollege.getModel();

        noStockBook = new ArrayList();
        setIconImage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        bookInterface = new javax.swing.JTabbedPane();
        jhsPanel = new javax.swing.JPanel();
        hsLevelBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookListJhs = new javax.swing.JTable();
        checkAllJhs = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        totalPriceJhs = new javax.swing.JLabel();
        jhsHeadTitle = new javax.swing.JLabel();
        shsPanel = new javax.swing.JPanel();
        jhsPanel1 = new javax.swing.JPanel();
        shsGradeCmbBox = new javax.swing.JComboBox<>();
        shsSemCmbBox = new javax.swing.JComboBox<>();
        shsHeadTitle = new javax.swing.JLabel();
        checkAllShs = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        totalPriceShs = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        bookListShs = new javax.swing.JTable();
        collegePanel = new javax.swing.JPanel();
        jhsPanel3 = new javax.swing.JPanel();
        collegeSubjectCmbBox = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookListCollege = new javax.swing.JTable();
        checkAllCollege = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        totalPriceCollege = new javax.swing.JLabel();
        collegeHeadTitle = new javax.swing.JLabel();
        buyBooksBtn = new javax.swing.JButton();
        header = new javax.swing.JLabel();
        subhead = new javax.swing.JPanel();
        srOfUser = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        subheadTime = new javax.swing.JLabel();
        footer = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buy Books");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 70, 40));

        hsLevelBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Grade Level", "Grade 7", "Grade 8", "Grade 9", "Grade 10" }));
        hsLevelBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hsLevelBoxActionPerformed(evt);
            }
        });

        bookListJhs.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        bookListJhs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Subject Code", "Book Title", "Stock", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookListJhs.setRowHeight(35);
        bookListJhs.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(bookListJhs);
        if (bookListJhs.getColumnModel().getColumnCount() > 0) {
            bookListJhs.getColumnModel().getColumn(0).setResizable(false);
            bookListJhs.getColumnModel().getColumn(0).setPreferredWidth(5);
            bookListJhs.getColumnModel().getColumn(1).setResizable(false);
            bookListJhs.getColumnModel().getColumn(1).setPreferredWidth(50);
            bookListJhs.getColumnModel().getColumn(2).setResizable(false);
            bookListJhs.getColumnModel().getColumn(2).setPreferredWidth(450);
            bookListJhs.getColumnModel().getColumn(3).setResizable(false);
            bookListJhs.getColumnModel().getColumn(3).setPreferredWidth(20);
            bookListJhs.getColumnModel().getColumn(4).setResizable(false);
            bookListJhs.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        checkAllJhs.setText("Check All Available");
        checkAllJhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllJhsActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel2.setText("TOTAL PRICE: Php");

        totalPriceJhs.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        totalPriceJhs.setText("0");

        jhsHeadTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        javax.swing.GroupLayout jhsPanelLayout = new javax.swing.GroupLayout(jhsPanel);
        jhsPanel.setLayout(jhsPanelLayout);
        jhsPanelLayout.setHorizontalGroup(
            jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jhsPanelLayout.createSequentialGroup()
                        .addComponent(checkAllJhs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(totalPriceJhs))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jhsPanelLayout.createSequentialGroup()
                        .addComponent(hsLevelBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jhsHeadTitle)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jhsPanelLayout.setVerticalGroup(
            jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hsLevelBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jhsHeadTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jhsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(totalPriceJhs))
                    .addComponent(checkAllJhs))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        bookInterface.addTab("Junior High School", jhsPanel);

        shsGradeCmbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Grade Level", "Grade 11", "Grade 12" }));
        shsGradeCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shsGradeCmbBoxActionPerformed(evt);
            }
        });

        shsSemCmbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "First Semester", "Second Semester" }));
        shsSemCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shsSemCmbBoxActionPerformed(evt);
            }
        });

        shsHeadTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        checkAllShs.setText("Check All Available");
        checkAllShs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllShsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel3.setText("TOTAL PRICE: Php");

        totalPriceShs.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        totalPriceShs.setText("0");
        totalPriceShs.setToolTipText("");

        bookListShs.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        bookListShs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Subject Code", "Book Title", "Stock", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookListShs.setRowHeight(35);
        jScrollPane4.setViewportView(bookListShs);
        if (bookListShs.getColumnModel().getColumnCount() > 0) {
            bookListShs.getColumnModel().getColumn(0).setResizable(false);
            bookListShs.getColumnModel().getColumn(0).setPreferredWidth(5);
            bookListShs.getColumnModel().getColumn(1).setResizable(false);
            bookListShs.getColumnModel().getColumn(1).setPreferredWidth(50);
            bookListShs.getColumnModel().getColumn(2).setResizable(false);
            bookListShs.getColumnModel().getColumn(2).setPreferredWidth(450);
            bookListShs.getColumnModel().getColumn(3).setResizable(false);
            bookListShs.getColumnModel().getColumn(3).setPreferredWidth(20);
            bookListShs.getColumnModel().getColumn(4).setResizable(false);
            bookListShs.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        javax.swing.GroupLayout jhsPanel1Layout = new javax.swing.GroupLayout(jhsPanel1);
        jhsPanel1.setLayout(jhsPanel1Layout);
        jhsPanel1Layout.setHorizontalGroup(
            jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jhsPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(83, Short.MAX_VALUE))
                    .addGroup(jhsPanel1Layout.createSequentialGroup()
                        .addComponent(shsGradeCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shsSemCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(shsHeadTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))
                    .addGroup(jhsPanel1Layout.createSequentialGroup()
                        .addComponent(checkAllShs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalPriceShs)
                        .addGap(83, 83, 83))))
        );
        jhsPanel1Layout.setVerticalGroup(
            jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shsHeadTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addGroup(jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shsGradeCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(shsSemCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jhsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(totalPriceShs))
                    .addComponent(checkAllShs))
                .addGap(12, 12, 12))
        );

        shsGradeCmbBox.getAccessibleContext().setAccessibleParent(shsPanel);
        shsSemCmbBox.getAccessibleContext().setAccessibleParent(shsPanel);
        shsHeadTitle.getAccessibleContext().setAccessibleParent(shsPanel);
        checkAllShs.getAccessibleContext().setAccessibleParent(shsPanel);
        jLabel3.getAccessibleContext().setAccessibleParent(shsPanel);
        totalPriceShs.getAccessibleContext().setAccessibleParent(shsPanel);

        javax.swing.GroupLayout shsPanelLayout = new javax.swing.GroupLayout(shsPanel);
        shsPanel.setLayout(shsPanelLayout);
        shsPanelLayout.setHorizontalGroup(
            shsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shsPanelLayout.createSequentialGroup()
                .addComponent(jhsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        shsPanelLayout.setVerticalGroup(
            shsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jhsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bookInterface.addTab("Senior High School", shsPanel);

        collegeSubjectCmbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Course", "General Education Courses", "Technical Courses" }));
        collegeSubjectCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collegeSubjectCmbBoxActionPerformed(evt);
            }
        });

        bookListCollege.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Subject Code", "Book Tittle", "Stock", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookListCollege.setRowHeight(35);
        bookListCollege.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(bookListCollege);
        if (bookListCollege.getColumnModel().getColumnCount() > 0) {
            bookListCollege.getColumnModel().getColumn(0).setResizable(false);
            bookListCollege.getColumnModel().getColumn(0).setPreferredWidth(5);
            bookListCollege.getColumnModel().getColumn(1).setResizable(false);
            bookListCollege.getColumnModel().getColumn(1).setPreferredWidth(50);
            bookListCollege.getColumnModel().getColumn(2).setResizable(false);
            bookListCollege.getColumnModel().getColumn(2).setPreferredWidth(500);
            bookListCollege.getColumnModel().getColumn(3).setResizable(false);
            bookListCollege.getColumnModel().getColumn(3).setPreferredWidth(20);
            bookListCollege.getColumnModel().getColumn(4).setResizable(false);
            bookListCollege.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        checkAllCollege.setText("Check All Available");
        checkAllCollege.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllCollegeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel5.setText("TOTAL PRICE: Php");

        totalPriceCollege.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        totalPriceCollege.setText("0");

        collegeHeadTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        javax.swing.GroupLayout jhsPanel3Layout = new javax.swing.GroupLayout(jhsPanel3);
        jhsPanel3.setLayout(jhsPanel3Layout);
        jhsPanel3Layout.setHorizontalGroup(
            jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanel3Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jhsPanel3Layout.createSequentialGroup()
                        .addComponent(collegeSubjectCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collegeHeadTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jhsPanel3Layout.createSequentialGroup()
                        .addGroup(jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jhsPanel3Layout.createSequentialGroup()
                                .addComponent(checkAllCollege)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(totalPriceCollege)))
                        .addContainerGap(77, Short.MAX_VALUE))))
        );
        jhsPanel3Layout.setVerticalGroup(
            jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jhsPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(collegeSubjectCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(collegeHeadTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jhsPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(totalPriceCollege))
                    .addComponent(checkAllCollege))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout collegePanelLayout = new javax.swing.GroupLayout(collegePanel);
        collegePanel.setLayout(collegePanelLayout);
        collegePanelLayout.setHorizontalGroup(
            collegePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jhsPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        collegePanelLayout.setVerticalGroup(
            collegePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collegePanelLayout.createSequentialGroup()
                .addComponent(jhsPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        bookInterface.addTab("College", collegePanel);

        getContentPane().add(bookInterface, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 182, -1, -1));

        buyBooksBtn.setBackground(new java.awt.Color(204, 11, 11));
        buyBooksBtn.setFont(new java.awt.Font("Segoe UI Black", 0, 20)); // NOI18N
        buyBooksBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyBooksBtn.setText("BUY BOOKS");
        buyBooksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBooksBtnActionPerformed(evt);
            }
        });
        getContentPane().add(buyBooksBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 630, 227, 44));

        header.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/head_book.png"))); // NOI18N
        getContentPane().add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        subhead.setBackground(new java.awt.Color(153, 153, 153));
        subhead.setForeground(new java.awt.Color(102, 102, 102));

        srOfUser.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        srOfUser.setForeground(new java.awt.Color(255, 255, 255));
        srOfUser.setText("SR-CODES");

        nameLabel.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("LASTNAME, FIRSTNAME |");

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ACCOUNT LOGGED IN:");

        subheadTime.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        subheadTime.setForeground(new java.awt.Color(255, 255, 255));
        subheadTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subheadTime.setText("HR:MIN");

        javax.swing.GroupLayout subheadLayout = new javax.swing.GroupLayout(subhead);
        subhead.setLayout(subheadLayout);
        subheadLayout.setHorizontalGroup(
            subheadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subheadLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srOfUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subheadTime, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        subheadLayout.setVerticalGroup(
            subheadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subheadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subheadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(srOfUser)
                    .addComponent(jLabel4)
                    .addComponent(subheadTime))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(subhead, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 970, -1));

        footer.setBackground(new java.awt.Color(9, 9, 9));

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 1, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("BATANGAS STATE UNIVERSITY, THE NATIONAL ENGINEERING UNIVERSITY © 2022 ");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout footerLayout = new javax.swing.GroupLayout(footer);
        footer.setLayout(footerLayout);
        footerLayout.setHorizontalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 970, Short.MAX_VALUE)
        );
        footerLayout.setVerticalGroup(
            footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, footerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
        );

        getContentPane().add(footer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 694, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buyBooksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBooksBtnActionPerformed
        // TODO add your handling code here:
        
        // Store values to lists to be passed on the next jFrame
        ArrayList <String> purchasedSubjCode = new ArrayList<>();
        ArrayList <String> purchasedBookTitle = new ArrayList<>();
        ArrayList <Integer> bookStock = new ArrayList<>();
        ArrayList <Integer> purchaseInfoPrice = new ArrayList<>();
              
        int bookTabIndex = bookInterface.getSelectedIndex();
        
        JTable table = bookListJhs;

        switch (bookTabIndex) {
            case 0:
                table = bookListJhs;
                rowCount = bookListJhs.getRowCount();               
                break;
            case 1:
                table = bookListShs;
                rowCount = bookListShs.getRowCount();
                break;
            case 2:
                table = bookListCollege;
                rowCount = bookListCollege.getRowCount();
                break;             
        }
        
        int totalAmount = 0;
        boolean noAvailableSelected = false;
        
        for (int i = 0; i < rowCount; i++) {
            String subjCode = table.getValueAt(i, 1).toString();
            String bookTitle = table.getValueAt(i, 2).toString();
            stockCount = Integer.valueOf(table.getValueAt(i, 3).toString());   
            boolean rowCheck = Boolean.valueOf(table.getValueAt(i, 0).toString());

            if (rowCheck == true && stockCount != 0) {
                int value = Integer.valueOf(table.getValueAt(i, 4).toString());
                totalAmount += value;
                
                purchasedSubjCode.add(subjCode);
                purchasedBookTitle.add(bookTitle);
                purchaseInfoPrice.add(value);             
                bookStock.add(stockCount);

            } else if (rowCheck == true && stockCount == 0) {
                table.setValueAt(false, i, 0);
                noAvailableSelected = true;
            }
        }
        if (noAvailableSelected == true) {
            JOptionPane.showMessageDialog(null, "All selected unavailable books will be disregarded.");
        }
        
        if (purchasedSubjCode.isEmpty() || purchasedBookTitle.isEmpty() || purchaseInfoPrice.isEmpty() || bookStock.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No selected book.", "", JOptionPane.ERROR_MESSAGE);  
        } else {
            new Purchase_Book(purchasedSubjCode, purchasedBookTitle, purchaseInfoPrice, bookStock, SRCODE, NAME, LASTNAME).setVisible(true);     
            dispose();
        }
           
    }//GEN-LAST:event_buyBooksBtnActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        srOfUser.setText(SRCODE);
        nameLabel.setText(LASTNAME + ", " + NAME + " " + " | ");
        
    }//GEN-LAST:event_formWindowGainedFocus

    private void checkAllCollegeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllCollegeActionPerformed
        // TODO add your handling code here:
        rowCount = bookListCollege.getRowCount();

        for (int i = 0; i < rowCount; i++)    {
            stockCount = Integer.valueOf(bookListCollege.getValueAt(i, 3).toString());

            if(checkAllCollege.isSelected()) {
                if(stockCount != 0) {       // Check the textbox if there is a stock
                    tblBookCollege.setValueAt(true, i, 0);
                }
            } else {
                tblBookCollege.setValueAt(false, i, 0); // Not check the box if the book is unavailable
            }
        }
    }//GEN-LAST:event_checkAllCollegeActionPerformed

    private void collegeSubjectCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collegeSubjectCmbBoxActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/university_shop?useSSL=false", "root", "");
            stmtGet = con.createStatement();

            gradeLevelIndex = collegeSubjectCmbBox.getSelectedIndex();

            // Resetting the values of checkbox and total price
            checkAllJhs.setSelected(false);
            totalBookPrice = 0;
            noStockBook.clear();
            tblBookCollege.setNumRows(0);
            collegeHeadTitle.setText("");

            switch (gradeLevelIndex) {
                case 1:                         // General Subject/Courses
                    getBookList = "SELECT * from books_c_gencourse";
                    collegeHeadTitle.setText("Gen Ed. Course Books");
                    break;
                case 2:                         // Technical Subject/Courses
                    getBookList = "SELECT * from books_c_techcourse";
                    collegeHeadTitle.setText("Technical Course Books");
                    break;
            }

            if (gradeLevelIndex != 0) {
                rsGet = stmtGet.executeQuery(getBookList);

                while (rsGet.next()) {
                    Object[] data = {false, rsGet.getString("code"), rsGet.getString("name"), rsGet.getInt("stock"), rsGet.getInt("price") };
                    tblBookCollege.addRow(data);
                }
            }
            rowCount = bookListCollege.getRowCount();

            for (int row=0; row < rowCount; row++) {
                bookPrice = Integer.valueOf(tblBookCollege.getValueAt(row, bookListJhs.getColumn("Price").getModelIndex()).toString());
                totalBookPrice += bookPrice;
            }
            totalPriceCollege.setText(String.valueOf(totalBookPrice));

            for (int i = 0; i < rowCount; i++) {
                stockCount = Integer.valueOf(bookListCollege.getValueAt(i, bookListJhs.getColumn("Stock").getModelIndex()).toString());

                if (stockCount == 0) {
                    noStockBookTitle = String.valueOf(tblBookCollege.getValueAt(i, bookListJhs.getColumn("Subject Code").getModelIndex()));
                    noStockBook.add(noStockBookTitle);
                }
            }
            if (! noStockBook.isEmpty()) {
                JOptionPane.showMessageDialog(null, """
                                                    Books for the following subjects are out-of-stock and are unavailable as of the moment:\r
                                                    \r
                                                    """ + noStockBook,
                    "Out of Stock", JOptionPane.ERROR_MESSAGE);
            }
            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_collegeSubjectCmbBoxActionPerformed

    private void checkAllJhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllJhsActionPerformed
        // TODO add your handling code here:
        rowCount = bookListJhs.getRowCount();

        for (int i = 0; i < rowCount; i++)    {
            stockCount = Integer.valueOf(bookListJhs.getValueAt(i, 3).toString());

            if(checkAllJhs.isSelected()) {
                if(stockCount != 0) {
                    tblBookJhs.setValueAt(true, i, 0);
                }
            } else {
                tblBookJhs.setValueAt(false, i, 0);
            }
        }
    }//GEN-LAST:event_checkAllJhsActionPerformed

    private void hsLevelBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsLevelBoxActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/university_shop?useSSL=false", "root", "");
            stmtGet = con.createStatement();

            gradeLevelIndex = hsLevelBox.getSelectedIndex();

            // Resetting the values of checkbox and total price
            checkAllJhs.setSelected(false);
            totalBookPrice = 0;
            noStockBook.clear();
            tblBookJhs.setNumRows(0);
            jhsHeadTitle.setText("");

            switch (gradeLevelIndex) {
                case 1:                         // Grade 7
                    getBookList = "SELECT * from books_jhs7";
                    jhsHeadTitle.setText("Books for Grade 7");
                    break;
                case 2:                         // Grade 8
                    getBookList = "SELECT * from books_jhs8";
                    jhsHeadTitle.setText("Books for Grade 8");
                    break;
                case 3:                         // Grade 9
                    getBookList = "SELECT * from books_jhs9";
                    jhsHeadTitle.setText("Books for Grade 9");
                    break;
                case 4:                         // Grade 10
                    getBookList = "SELECT * from books_jhs10";
                    jhsHeadTitle.setText("Books for Grade 10");
                    break;
            }

            if (gradeLevelIndex != 0) {
                rsGet = stmtGet.executeQuery(getBookList);

                while (rsGet.next()) {
                    Object[] data = {false, rsGet.getString("code"), rsGet.getString("name"), rsGet.getInt("stock"), rsGet.getInt("price") };
                    tblBookJhs.addRow(data);
                }
            }

            rowCount = bookListJhs.getRowCount();

            for (int row=0; row < rowCount; row++) {
                bookPrice = Integer.valueOf(tblBookJhs.getValueAt(row, bookListJhs.getColumn("Price").getModelIndex()).toString());
                totalBookPrice += bookPrice;
            }
            totalPriceJhs.setText(String.valueOf(totalBookPrice));

            for (int i = 0; i < rowCount; i++) {
                stockCount = Integer.valueOf(bookListJhs.getValueAt(i, bookListJhs.getColumn("Stock").getModelIndex()).toString());

                if (stockCount == 0) {
                    noStockBookTitle = String.valueOf(tblBookJhs.getValueAt(i, 1));
                    noStockBook.add(noStockBookTitle);
                }
            }
            if (! noStockBook.isEmpty()) {
                JOptionPane.showMessageDialog(null, """
                                                    Books for the following subjects are out-of-stock and are unavailable as of the moment:\r
                                                    \r
                                                    """ + noStockBook,
                    "Out of Stock", JOptionPane.ERROR_MESSAGE);
            }
            con.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_hsLevelBoxActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        new Home(LASTNAME, NAME, MIDDLENAME, SRCODE).setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void shsSemCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shsSemCmbBoxActionPerformed
        // TODO add your handling code here:
       try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/university_shop?useSSL=false", "root", "");
            stmtGet = con.createStatement();

            tblBookShs = (DefaultTableModel)bookListShs.getModel();

            gradeLevelIndex = shsGradeCmbBox.getSelectedIndex();
            int semesterIndex = shsSemCmbBox.getSelectedIndex();

            totalBookPrice = 0;
            noStockBook.clear();
            shsHeadTitle.setText("");

            if(gradeLevelIndex == 0 || semesterIndex == 0) {            // Default
                tblBookShs.setNumRows(0);

            } else if (gradeLevelIndex == 1 && semesterIndex == 1) {    // Grade 11, First Semester
                getBookList = "SELECT * from books_shs11a";
                shsHeadTitle.setText("Books of Grade 11, 1st Semester");

            } else if (gradeLevelIndex == 1 && semesterIndex == 2) {    // Grade 11, Second Semester
                getBookList = "SELECT * from books_shs11b";
                shsHeadTitle.setText("Books of Grade 11, 2nd Semester");

            } else if (gradeLevelIndex == 2 && semesterIndex == 1) {    // Grade 12, First Semester
                getBookList = "SELECT * from books_shs12a";
                shsHeadTitle.setText("Books of Grade 12, 1st Semester");                

            } else if (gradeLevelIndex == 2 && semesterIndex == 2) {    // Grade 12, Second Semester
                getBookList = "SELECT * from books_shs12b";
                shsHeadTitle.setText("Books of Grade 12, 2nd Semester");                
            }

            if (gradeLevelIndex != 0 && semesterIndex != 0) {
                tblBookShs.setNumRows(0);
                rsGet = stmtGet.executeQuery(getBookList);

                while (rsGet.next()) {
                    Object[] data = {false, rsGet.getString("code"), rsGet.getString("name"), rsGet.getInt("stock") ,rsGet.getInt("price")};
                    tblBookShs.addRow(data);
                }
            }
            rowCount = bookListShs.getRowCount();

            for (int row = 0 ; row < rowCount; row++) {
                bookPrice = Integer.valueOf(tblBookShs.getValueAt(row, bookListShs.getColumn("Price").getModelIndex()).toString());
                totalBookPrice += bookPrice;
            }

            totalPriceShs.setText(String.valueOf(totalBookPrice));
            rowCount = bookListShs.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                stockCount = Integer.valueOf(bookListShs.getValueAt(i, bookListShs.getColumn("Stock").getModelIndex()).toString());

                if (stockCount == 0) {
                    noStockBookTitle = String.valueOf(tblBookShs.getValueAt(i, 1));
                    noStockBook.add(noStockBookTitle);       
                }
            }
            if (! noStockBook.isEmpty()) {
                JOptionPane.showMessageDialog(null, """
                                                    Books for the following subjects are out-of-stock and are unavailable as of the moment:\r
                                                    \r
                                                    """ + noStockBook, "Out of Stock", JOptionPane.ERROR_MESSAGE);
            }
            con.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_shsSemCmbBoxActionPerformed

    private void shsGradeCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shsGradeCmbBoxActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/university_shop?useSSL=false", "root", "");
            stmtGet = con.createStatement();

            tblBookShs = (DefaultTableModel)bookListShs.getModel();

            gradeLevelIndex = shsGradeCmbBox.getSelectedIndex();
            int semesterIndex = shsSemCmbBox.getSelectedIndex();

            totalBookPrice = 0;
            noStockBook.clear();

            if(gradeLevelIndex == 0 || semesterIndex == 0) {            // Default
                tblBookShs.setNumRows(0);
            } else if (gradeLevelIndex == 1 && semesterIndex == 1) {    // Grade 11, First Semester
                getBookList = "SELECT * from books_shs11a";
                shsHeadTitle.setText("Books of Grade 11, 1st Semester");

            } else if (gradeLevelIndex == 1 && semesterIndex == 2) {    // Grade 11, Second Semester
                getBookList = "SELECT * from books_shs11b";
                shsHeadTitle.setText("Books of Grade 11, 2nd Semester");

            } else if (gradeLevelIndex == 2 && semesterIndex == 1) {    // Grade 12, First Semester
                getBookList = "SELECT * from books_shs12a";
                shsHeadTitle.setText("Books of Grade 12, 1st Semester");                

            } else if (gradeLevelIndex == 2 && semesterIndex == 2) {    // Grade 12, Second Semester
                getBookList = "SELECT * from books_shs12b";
                shsHeadTitle.setText("Books of Grade 12, 2nd Semester");                
            }

            if (gradeLevelIndex != 0 && semesterIndex != 0) {
                tblBookShs.setNumRows(0);
                rsGet = stmtGet.executeQuery(getBookList);

                while (rsGet.next()) {
                    Object[] data = {false, rsGet.getString("code"), rsGet.getString("name"), rsGet.getInt("stock") ,rsGet.getInt("price")};
                    tblBookShs.addRow(data);
                }
            }
            rowCount = bookListShs.getRowCount();

            for (int row = 0 ; row < rowCount; row++) {
                bookPrice = Integer.valueOf(tblBookShs.getValueAt(row, bookListShs.getColumn("Price").getModelIndex()).toString());
                totalBookPrice += bookPrice;
            }

            totalPriceShs.setText(String.valueOf(totalBookPrice));

            rowCount = bookListShs.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                stockCount = Integer.valueOf(bookListShs.getValueAt(i, bookListShs.getColumn("Stock").getModelIndex()).toString());

                if (stockCount == 0) {
                    noStockBookTitle = String.valueOf(tblBookShs.getValueAt(i, 1));
                    noStockBook.add(noStockBookTitle);
                }
            }
            if (! noStockBook.isEmpty()) {
                JOptionPane.showMessageDialog(null, """
                                                    Books for the following subjects are out-of-stock and are unavailable as of the moment:\r
                                                    \r
                                                    """ + noStockBook, "Out of Stock", JOptionPane.ERROR_MESSAGE);
            }
            con.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_shsGradeCmbBoxActionPerformed

    private void checkAllShsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllShsActionPerformed
        // TODO add your handling code here:
        rowCount = bookListShs.getRowCount();

        for (int i = 0; i < rowCount; i++)    {
            stockCount = Integer.valueOf(bookListShs.getValueAt(i, 3).toString());

            if(checkAllShs.isSelected()) {
                if(stockCount != 0) {
                    tblBookShs.setValueAt(true, i, 0);
                }
            } else {
                tblBookShs.setValueAt(false, i, 0);
            }
        }
    }//GEN-LAST:event_checkAllShsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            FlatArcIJTheme.setup();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
 
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books().setVisible(true);
            }
        });
    }
    
    private void setIconImage() { // Setting the icon of the program
        URL iconUrl = this.getClass().getResource("images/univ_shop_icon.png");
        Toolkit tk = this.getToolkit();
        setIconImage(tk.getImage(iconUrl));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTabbedPane bookInterface;
    private javax.swing.JTable bookListCollege;
    private javax.swing.JTable bookListJhs;
    private javax.swing.JTable bookListShs;
    private javax.swing.JButton buyBooksBtn;
    private javax.swing.JCheckBox checkAllCollege;
    private javax.swing.JCheckBox checkAllJhs;
    private javax.swing.JCheckBox checkAllShs;
    private javax.swing.JLabel collegeHeadTitle;
    private javax.swing.JPanel collegePanel;
    private javax.swing.JComboBox<String> collegeSubjectCmbBox;
    private javax.swing.JPanel footer;
    private javax.swing.JLabel header;
    private javax.swing.JComboBox<String> hsLevelBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel jhsHeadTitle;
    private javax.swing.JPanel jhsPanel;
    private javax.swing.JPanel jhsPanel1;
    private javax.swing.JPanel jhsPanel3;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox<String> shsGradeCmbBox;
    private javax.swing.JLabel shsHeadTitle;
    private javax.swing.JPanel shsPanel;
    private javax.swing.JComboBox<String> shsSemCmbBox;
    private javax.swing.JLabel srOfUser;
    private javax.swing.JPanel subhead;
    private javax.swing.JLabel subheadTime;
    private javax.swing.JLabel totalPriceCollege;
    private javax.swing.JLabel totalPriceJhs;
    private javax.swing.JLabel totalPriceShs;
    // End of variables declaration//GEN-END:variables

}
